openapi: 3.1.1
info:
  title: GecseVa'r OpenAPI generator
  description: |
    #### - [The repository](https://github.com/GecseA/gecsevar-hu-backend)
    #### - This file also *contains* recommendations and naming conventions for URI paths and schemas
  termsOfService: https://gecsevar.hu/terms/
  contact:
    email: gecsevar@gmail.hu
  license:
    name: License
    url: https://www.gecsevar.hu/licenses/LICENSE-1.0.html
  version: 1.7.0
externalDocs:
  description: Find out more
  url: https://www.gecsevar.hu
servers:
  - url: https://test-api.gecsevar.hu/
tags:
  - name: Test 1
    description: Paths and Schemas for cover most functionalities
  - name: Test CRUD
    description: Paths for create a CreateReadUpdateDelete test
paths:
  /first/my-resources:
    get:
      operationId: getFirstTestsByIdAndName
      description: "Refer to [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) \n\n
        **URI Maximum Length:** *The total URI, including the Path and the Query, **MUST NOT** exceed 2000 characters in length including any formatting codes such as commas, underscores, question marks, hyphens, plus or slashes* \n\n
        **URI Naming Conventions:** *URLs **MUST** follow the standard naming convention as described below:* \n\n
        - the URI **MUST** be specified in all lower case \n\n
        - only hyphens ‘-‘ can be used to separate words or path parameters for readability (no spaces or underscores) \n\n
        - underscores ‘_’ or camelCase can be used to separate words in query parameter names but not as part of the base URI \n\n
        \n\n
        **Resource Names:** *API Designers **MUST** follow these principles when creating a REST API:* \n\n
        - Nouns **MUST** be used - not verbs for names. \n\n
        - Resource names **MUST** be plural. Where the plural of a resource is non-standard, such as leaf or fish, then either choose a more appropriate noun, or use the proper plural - leaves, fishes. \n\n
        - Resource names **MUST** be lower-case and use only alphabetic characters and hyphens. \n\n
        - The hyphen character, ( - ), **MUST** be used as a word separator in URI path parameters. \n\n
        Note that **this is the only place** where hyphens are used as a word separator. In nearly all other situations *camelCase* OR an *underscore* character, ( _ ), **MUST** be used. \n\n
         "
      tags:
        - Test 1
      parameters:
        - name: resourceStringId
          in: query
          description: "Query Parameter Names \n\n
            - Literals/expressions in query strings **SHOULD** be separated using underscore ( _ ). \n\n
            - Query parameters values MUST be percent-encoded. Consider that AWS requires query paramter names to conform to the regex ^[a-zA-Z0-9._$-]+$ \n\n
            - Query parameters **MUST** start with a letter and **SHOULD** be either camelCase or snake_case, consistent with the case standard employed for field names. \n\n
            - Query parameters **SHOULD** be optional. \n\n
            - Query parameters **SHOULD** not contain characters that are not URL safe. \n\n
            "
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestDto1"
  /second/my-other-resources/{id}/{name}:
    get:
      operationId: getSecondTestsByIdAndName
      description: Get a test
      tags:
        - Test 1
      parameters:
        - name: id
          in: path
          description: An ID as a number
          required: true
          schema:
            type: integer
            format: int32
        - name: name
          in: path
          description: A NAME as a string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestDto2"
  /third/some-others/data:
    get:
      operationId: getThirdSomeOthersData
      description: Another test
      tags:
        - Test 1
      parameters:
        - name: id
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: path
          in: query
          description: ''
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestDto3"
  /my/crud/endpoint:
    get:
      operationId: getMyCrudEndpoint
      description: CRUD example - READ - path
      tags:
        - Test CRUD
      parameters:
        - name: id
          in: query
          description: ''
          required: false
          schema:
            type: number
            format: int32
        - name: myString
          in: query
          description: ''
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of TestDto1 objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestDto1'
    post:
      summary: Create a new TestDto1 resource
      tags:
        - Test CRUD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestDto1'
      responses:
        '201':
          description: TestDto1 created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDto1'
  /my/crud/endpoint/{id}:
    get:
      summary: Retrieve a single TestDto1 resource by ID
      tags:
        - Test CRUD
      parameters:
        - name: id
          in: path
          description: ID of TestDto1 to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A TestDto1 object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDto1'
        '404':
          description: TestDto1 not found
    put:
      summary: Update an existing TestDto1 resource by ID
      tags:
        - Test CRUD
      parameters:
        - name: id
          in: path
          description: ID of TestDto1 to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestDto1'
      responses:
        '200':
          description: TestDto1 updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDto1'
        '404':
          description: TestDto1 not found
    delete:
      summary: Delete a TestDto1 resource by ID
      tags:
        - Test CRUD
      parameters:
        - name: id
          in: path
          description: ID of TestDto1 to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: TestDto1 deleted
        '404':
          description: TestDto1 not found

components:
  schemas:
    TestDto1:
      type: object
      tags:
        - "TAG1"
        - "TAG2"
      description: "**Field Names:** The data model for the representation **MUST** conform to the *JSON* specification. \n\n
        The values may themselves be objects, strings, numbers, booleans, or arrays of objects. \n\n
        - Key names **MUST** be either camelCase or snake_case, however case MUST be used consistently. \n\n
        foo \n\n
        barBaz OR bar_baz \n\n
        - Prefix such as is or has **SHOULD NOT** be used for keys of type boolean. \n\n
        - Fields that represent arrays **SHOULD** be named using plural nouns (e.g. authenticators-contains one or more authenticators, products-contains one or more products). \n\n
        "
      required:
        - id
        - myBool
        - myStringId
        - aDateTime
        - myOtherEnum
      properties:
        id:
          $ref: "#/components/schemas/ResourceId"
        myBool:
          type: boolean
          description: Quite nice description for myBool
        myString:
          type: string
        myStringId:
          type: string
          format: uuid
        myNumber:
          type: integer
          format: int32
        myNumber2:
          type: integer
          format: int64
        aDateTime:
          type: string
          format: date-time
          description: "**ISO8601 Formatted Dates** \n\n
            All implementations using dates **MUST** conform to ISO 8601 format. \n\n
            In ISO 8601, date and time values are ordered from the largest to smallest unit of time: year, month (or week), day, hour, minute, second, and fraction of second.  \n\n
            "
        aDate:
          type: string
          format: date
          description: "**Date Field Naming Conventions** \n\n
            *When using date fields, the following naming conventions for these fields should be used:* \n\n
            - For properties requiring both date and time, services MUST use the suffix datetime, e.g. startDateTime 	start_datetime. \n\n
            - For properties requiring only date information without specifying time, services MUST use the suffix date, e.g. birthDate birth_date. \n\n
            - For properties requiring only time information without specifying date, services MUST use the suffix time, e.g. startTime \n\n
            "
        aTime:
          type: string
          format: time
        myEnum:
          type: string
          enum:
            - MY_ENUM_1
            - MY_ENUM_2
            - MY_ENUM_3
        myOtherEnum:
          type: string
          enum:
            - MY_OTHER_ENUM_1
            - MY_OTHER_ENUM_2
            - MY_OTHER_ENUM_3
        myArray:
          type: array
          items:
            type: string
    TestDto2:
      type: object
      tags: ["TAG2"]
      required:
        - id
        - myChild_1
        - myChilds_1
      properties:
        id:
          $ref: "#/components/schemas/ResourceId"
        myChild_1:
           $ref: "#/components/schemas/TestDto1"
        myChilds_1:
          type: array
          items:
            $ref: "#/components/schemas/TestDto1"
        myChild_2:
          $ref: "#/components/schemas/TestDto1"
        myChilds_2:
          type: array
          items:
            $ref: "#/components/schemas/TestDto1"
    TestDto3:
      type: object
      tags: ["TAG3"]
      required:
        - id
        - numberId
      properties:
        id:
          $ref: "#/components/schemas/ResourceId"
        numberId:
          type: integer
          format: int32
          default: -1
          description: Can't be null, it will be UNDEFINED on web and MUI elements lost control
        anEnum:
          $ref: "#/components/schemas/MyEnum"
        mySubChild:
          type: array
          items:
            $ref: "#/components/schemas/TestDto2"
        otherEnum:
          $ref: "#/components/schemas/MyOtherEnum"
        eastSideEnum:
          $ref: "#/components/schemas/MyEastSideEnum"
    MyEnum:
      type: string
      enum:
        - NONE
        - ONE
        - TWO
        - FOUR
        - OH_YEAH_THREE
    ResourceId:
      type: integer
      format: int32
    ResponseErrorCodes:
      type: string
      enum:
        - THIS_IS_BIG_ERROR
        - THIS_IS_NOT_TO_BIG
    MyOtherEnum:
      type: string
      enum:
        - ''
        - aborted
        - invalid
        - missing
        - warning
        - no_online
        - no_send
        - non_exist
        - 'not unique'
        - not_checked
    MyEastSideEnum:
      type: string
      enum:
        - 0%
        - 1%
        - 10%
        - 3%
        - '5,5%'
        - '7,7%'
        - '9,5%'
        - AAM
        - AM
        - EU
        - EUK
        - F.AFA
        - FAD
        - K.AFA
        - MAA
        - TAM
        - ÁKK
        - ÁTHK

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
