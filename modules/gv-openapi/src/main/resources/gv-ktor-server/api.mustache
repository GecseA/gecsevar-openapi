package {{apiPackage}}

import io.ktor.server.application.*
import io.ktor.server.routing.*
import io.ktor.server.auth.*

interface {{classname}} {

{{#operations}}
{{#operation}}
    suspend fun {{{operationId}}}(call: ApplicationCall)
{{/operation}}
{{/operations}}
}
{{#operations}}
{{#featureLocations}}
{{/featureLocations}}
fun Route.{{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}}(api: {{classname}}) {
{{#operation}}
    {{#hasAuthMethods}}
    {{#authMethods}}authenticate("{{{name}}}") {
    {{/authMethods}}
    {{/hasAuthMethods}}
    {{^featureLocations}}
    /**
     * Api Operation: {{{summary}}}
     * operation ID : {{{operationId}}}
     * description  : {{{notes}}}
     */
    {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}") {
        api.{{{operationId}}}(call)
        // Request
{{#pathParams}}        // val {{baseName}} = call.parameters["{{baseName}}"]{{^required}}?{{/required}}.to{{{dataType}}}() {{#required}}?: throw IllegalArgumentException("Invalid {{baseName}}"){{/required}}{{^last}}{{/last}}
{{/pathParams}}
{{#queryParams}}        // val {{baseName}} = call.request.queryParameters["{{baseName}}"]{{^required}}?{{/required}}{{#isPrimitiveType}}.to{{{dataType}}}(){{/isPrimitiveType}} {{#required}}?: throw IllegalArgumentException("Invalid {{baseName}}"){{/required}}{{^last}}{{/last}}
{{/queryParams}}
{{#bodyParams}}        // val request = call.receive<{{#isArray}}{{^isList}}List<{{items.dataType}}>{{/isList}}{{/isArray}}{{^isArray}}{{{dataType}}}{{/isArray}}>(){{^last}}{{/last}}
{{/bodyParams}}
        // Response
        /**
{{#responses}}
          * code = {{{code}}}, message = "{{{message}}}"{{^containerType}}{{#baseType}}, response: {{#lambda.convert_to_pascal_case}}{{{baseType}}}{{/lambda.convert_to_pascal_case}}{{/baseType}}{{/containerType}}{{#containerType}} response {{{containerType}}}: List<{{#lambda.convert_to_pascal_case}}{{#baseType}}{{{baseType}}}{{/baseType}}{{/lambda.convert_to_pascal_case}}> {{/containerType}}{{#hasMore}}{{/hasMore}}
{{/responses}}
        {{#implicitHeaders}}
            @ApiImplicitParams({
            {{#headerParams}}
                {{>implicitHeader}}
            {{/headerParams}}
            })
        {{/implicitHeaders}}
          */
    }
    {{/featureLocations}}
    {{#hasAuthMethods}}
    }
    {{/hasAuthMethods}}
{{/operation}}
}
{{/operations}}
