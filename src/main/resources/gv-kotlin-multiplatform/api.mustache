package {{apiPackage}}

import {{modelPackage}}.*
import io.ktor.client.call.*
import io.ktor.http.*
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

class {{classname}}(private val httpService: HttpService) {

{{#operations}}
    {{#operation}}
    @Throws(Exception::class)
    suspend fun {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{#lambda.convert_path_to_fun}}{{path}}{{/lambda.convert_path_to_fun}}(chat: Chat) {
        val res = httpService.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}", Json.encodeToString(chat))
        if (res.status == HttpStatusCode.OK) {

        }
    }
    {{/operation}}
{{/operations}}
}

/*

package hu.scheiber.happychat.api

import hu.scheiber.happychat.models.Chat
import io.ktor.client.call.*
import io.ktor.http.*
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

class ChatSocket(private val httpService: HttpService) {

@Throws(Exception::class)
suspend fun postChat(chat: Chat) {
val res = httpService.post("/web_chat", Json.encodeToString(chat))

if (res.status == HttpStatusCode.OK) {

}
}
@Throws(Exception::class)
suspend fun getChats(roomId : Int) : MutableList<Chat> {

    val res = httpService.get("/web_chat/$roomId")

    if (res.status == HttpStatusCode.OK) {
    return Json.decodeFromString(res.body())
    }

    return mutableListOf()
    }
    }

interface {{classname}} {

{{#operations}}
{{#operation}}
    suspend fun {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{#lambda.convert_path_to_fun}}{{path}}{{/lambda.convert_path_to_fun}}(call: ApplicationCall)
{{/operation}}
{{/operations}}
}

{{#operations}}
{{#featureLocations}}
{{/featureLocations}}
fun Route.{{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}}(api: {{classname}}) {
{{#operation}}
    {{#hasAuthMethods}}
        {{#authMethods}}
            authenticate("{{{name}}}") {
        {{/authMethods}}
    {{/hasAuthMethods}}
    {{^featureLocations}}
    {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}") {
        api.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{#lambda.convert_path_to_fun}}{{path}}{{/lambda.convert_path_to_fun}}(call)
    }
    {{/featureLocations}}
    {{#hasAuthMethods}}
            }
    {{/hasAuthMethods}}
{{/operation}}
}
{{/operations}}
*/