{{>licenseInfo}}
package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}
import io.ktor.client.call.*
import io.ktor.client.statement.HttpResponse
import io.ktor.http.*
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

{{#operations}}
class {{classname}}(private val client: HttpService) {
{{#operation}}
    @Throws(Exception::class)
    suspend fun {{operationId}}(
        {{#allParams}}{{{paramName}}}: {{{dataType}}}{{#isArray}}<{{items.complexType}}{{^isList}}{{/isList}}>{{/isArray}}, {{/allParams}}
    ): HttpResponse {
        return client.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}"
{{#pathParams}}
            , mapOf<String, Any>("{{baseName}}" to {{#isContainer}}{{paramName}}.joinToString(","){{/isContainer}}{{^isContainer}}{{{paramName}}}{{/isContainer}})
{{/pathParams}}
{{^pathParams}}
            , emptyMap()
{{/pathParams}}
{{#hasBodyParam}}
            , Json.encodeToString({{#bodyParam}}{{#isArray}}({{{paramName}}}{{^isList}}{{/isList}}){{/isArray}}{{^isArray}}{{#isMap}}{{operationIdCamelCase}}Request({{{paramName}}}){{/isMap}}{{^isMap}}{{{paramName}}}{{/isMap}}{{/isArray}}{{/bodyParam}})
{{/hasBodyParam}}
        )
    }
{{/operation}}
}
{{/operations}}

/*
package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

import {{packageName}}.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

{{#operations}}
    {{#nonPublicApi}}internal {{/nonPublicApi}}open class {{classname}}(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    {{#operation}}
        /**
        * {{summary}}
        * {{notes}}
        {{#allParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
        {{/allParams}} * @return {{{returnType}}}{{^returnType}}void{{/returnType}}
        */
        {{#returnType}}
            @Suppress("UNCHECKED_CAST")
        {{/returnType}}
open suspend fun {{operationId}}({{#allParams}}{{{paramName}}}: {{{dataType}}}{{#required}}{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{/required}}{{^required}}?{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}, {{/allParams}}): HttpResponse<{{{returnType}}}{{^returnType}}Unit{{/returnType}}> {

            val localVariableAuthNames = listOf<String>({{#authMethods}}"{{name}}", {{/authMethods}})

            val localVariableBody = {{#hasBodyParam}}{{#bodyParam}}{{#isArray}}{{operationIdCamelCase}}Request({{{paramName}}}{{^isList}}.asList(){{/isList}}){{/isArray}}{{^isArray}}{{#isMap}}{{operationIdCamelCase}}Request({{{paramName}}}){{/isMap}}{{^isMap}}{{{paramName}}}{{/isMap}}{{/isArray}}{{/bodyParam}}{{/hasBodyParam}}
        {{^hasBodyParam}}
            {{#hasFormParams}}
                {{#isMultipart}}
                        formData {
                    {{#formParams}}
                        {{{paramName}}}?.apply { append("{{{baseName}}}", {{{paramName}}}) }
                    {{/formParams}}
                        }
                {{/isMultipart}}
                {{^isMultipart}}
                        ParametersBuilder().also {
                    {{#formParams}}
                        {{{paramName}}}?.apply { it.append("{{{baseName}}}", {{{paramName}}}.toString()) }
                    {{/formParams}}
                        }.build()
                {{/isMultipart}}
            {{/hasFormParams}}
            {{^hasFormParams}}
                    io.ktor.client.utils.EmptyContent
            {{/hasFormParams}}
        {{/hasBodyParam}}

            val localVariableQuery = mutableMapOf<String, List<String>>(){{#queryParams}}
            {{{paramName}}}?.apply { localVariableQuery["{{baseName}}"] = {{#isContainer}}toMultiValue(this, "{{collectionFormat}}"){{/isContainer}}{{^isContainer}}listOf("${{{paramName}}}"){{/isContainer}} }{{/queryParams}}
            val localVariableHeaders = mutableMapOf<String, String>(){{#headerParams}}
            {{{paramName}}}?.apply { localVariableHeaders["{{baseName}}"] = {{#isContainer}}this.joinToString(separator = collectionDelimiter("{{collectionFormat}}")){{/isContainer}}{{^isContainer}}this.toString(){{/isContainer}} }{{/headerParams}}

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.{{httpMethod}},
"{{path}}"{{#pathParams}}.replace("{" + "{{baseName}}" + "}", {{#isContainer}}{{paramName}}.joinToString(","){{/isContainer}}{{^isContainer}}"${{{paramName}}}"{{/isContainer}}){{/pathParams}},
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = {{#hasAuthMethods}}true{{/hasAuthMethods}}{{^hasAuthMethods}}false{{/hasAuthMethods}},
            )

            return {{#hasBodyParam}}jsonRequest{{/hasBodyParam}}{{^hasBodyParam}}{{#hasFormParams}}{{#isMultipart}}multipartFormRequest{{/isMultipart}}{{^isMultipart}}urlEncodedFormRequest{{/isMultipart}}{{/hasFormParams}}{{^hasFormParams}}request{{/hasFormParams}}{{/hasBodyParam}}(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).{{#isArray}}wrap<{{operationIdCamelCase}}Response>().map { value{{^isList}}.toTypedArray(){{/isList}} }{{/isArray}}{{^isArray}}{{#isMap}}wrap<{{operationIdCamelCase}}Response>().map { value }{{/isMap}}{{^isMap}}wrap(){{/isMap}}{{/isArray}}
            }

        {{#hasBodyParam}}
            {{#bodyParam}}
                {{#isArray}}{{>serial_wrapper_request_list}}{{/isArray}}{{#isMap}}{{>serial_wrapper_request_map}}{{/isMap}}
            {{/bodyParam}}
        {{/hasBodyParam}}
        {{#isArray}}
            {{>serial_wrapper_response_list}}
        {{/isArray}}
        {{#isMap}}
            {{>serial_wrapper_response_map}}
        {{/isMap}}

    {{/operation}}
        }
{{/operations}}
*/

/*
interface {{classname}} {

{{#operations}}
{{#operation}}
    suspend fun {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{#lambda.convert_path_to_fun}}{{path}}{{/lambda.convert_path_to_fun}}(call: ApplicationCall)
{{/operation}}
{{/operations}}
}

{{#operations}}
{{#featureLocations}}
{{/featureLocations}}
fun Route.{{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}}(api: {{classname}}) {
{{#operation}}
    {{#hasAuthMethods}}
        {{#authMethods}}
            authenticate("{{{name}}}") {
        {{/authMethods}}
    {{/hasAuthMethods}}
    {{^featureLocations}}
    {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}") {
        api.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{#lambda.convert_path_to_fun}}{{path}}{{/lambda.convert_path_to_fun}}(call)
    }
    {{/featureLocations}}
    {{#hasAuthMethods}}
    }
    {{/hasAuthMethods}}
{{/operation}}
}
{{/operations}}

*/